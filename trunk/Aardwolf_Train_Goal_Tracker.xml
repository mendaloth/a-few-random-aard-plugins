<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, October 08, 2010, 6:26 PM -->
<!-- MuClient version 4.61 -->

<!-- Plugin "Wordgame" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Train_Goal_Tracker"
   author="Mendaloth"
   id="53afe1da36641d8950075f25"
   language="Lua"
   purpose="Reports information on percent of experience and levels you have gained."
   save_state="y"
   date_written="2010-10-08 18:25:13"
   requires="4.61"
   version="1.0"
   >
   
<description trim="n">
<![CDATA[
Aardwolf Train Goal Tracker v 1.0
<=================== ACTIONS ===================>
pupgoal help                   --> Displays this message.                                 
pupgoal setgoal <type> <max>   --> Sets your goal for each type.


<=================== DISPLAY ===================>
pupgoal show                   --> Shows all of your goals.
pupgoal show <type>            --> Shows only a certain type of goal,
                                 > options are stats, hp, mana, moves.
pupgoal milestones             --> Shows all of your milestones.
pupgoal milestones <type>      --> Shows the hp/mana/moves milestones where 
                                 > training costs go up.

]]>
</description>   

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>



  <trigger
   enabled="y"
   match="^Your stats and amount trained are\:$"
   regexp="y"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		EnableTriggerGroup("start_capture_stats", true)
	  </send>
  </trigger>
  
  
    <trigger
   enabled="y"
   match="^              Base    Race   Tier   Wish   Your                    $"
   regexp="y"
   omit_from_output = "y"
   group="start_capture_stats"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
    <trigger
   enabled="y"
   match="^              Cost    Mod    Mod    Mod    Cost    Trained    Max  $"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
        <trigger
   enabled="y"
   match="^              \-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-  \-\-\-\-\-\-\-  \-\-\-\-\-\-\-$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
    
        <trigger
   enabled="y"
   match="^Note\: You cannot train any more stats\.$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
    <trigger
   enabled="y"
   match="^You have (.*?) training sessions? available\.$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
  <trigger
   enabled="y"
   match="^You have (.*?) practice sessions? available\.$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
  <trigger
   enabled="y"
   match="^[ ]+You have already hit your maximum of (.*?)\.$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
  

  
    
        <trigger
   enabled="y"
   match="^[ ]+You have already hit your maximum of (.*?)\.$"
   regexp="y"
   group="start_capture_stats"
   omit_from_output = "y"
   send_to="12"
   sequence="100"
  >
	  <send>
		--Do nothing, trigger for gagging purposes only.
	  </send>
  </trigger>
  
    <trigger
   enabled="n"
   group="start_capture_stats"
   omit_from_output = "y"
   match="^([\w ]*?)\:[ ]+(.*?)[ ]+(.*?)[ ]+(.*?)[ ]+(.*?)[ ]+(.*?)[ ]+(.*?)[ ]+(.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
	  <send>
		
		local race_mod = tonumber("%3")
		local tier_mod = tonumber("%4")
		local wish_mod = tonumber("%5")
		local total_mod = race_mod + tier_mod + wish_mod
		local trained = tonumber("%7")	
		
		local first_wildcard_trimmed = trim("%1")
		
		if (first_wildcard_trimmed == "Strength") then
			str_mod = total_mod
		end
		
		if (first_wildcard_trimmed == "Intelligence") then
			int_mod = total_mod
		end
		
		if (first_wildcard_trimmed == "Wisdom") then
			wis_mod = total_mod
		end
		
		if (first_wildcard_trimmed == "Dexterity") then
			dex_mod = total_mod
		end
		
		if (first_wildcard_trimmed == "Constitution") then
			con_mod = total_mod
		end
		
		if (first_wildcard_trimmed == "Luck") then
			luck_mod = total_mod
		end
																																														
		if (first_wildcard_trimmed == "Moves") then
			--this is the last one so return
			EnableTriggerGroup("start_capture_stats", false)
			moves_from_equipment = Get_GMCP_Stat("moves") - trained
			Execute(command_to_run_after_stats_captured)
			command_to_run_after_stats_captured = ""
		end
		
		if (first_wildcard_trimmed == "Hp") then
			hp_from_equipment = Get_GMCP_Stat("hp") - trained
		end
		
		if (first_wildcard_trimmed == "Mana") then
			mana_from_equipment = Get_GMCP_Stat("mana") - trained
		end
	  </send>
  </trigger>
  
</triggers>


<!--  Aliases  -->

<aliases>  
<alias
   match="pupgoal help"
   enabled="y"
   send_to="12"
   sequence="95"
   expand_variables="y"
  >
  <send>
	 Note(GetPluginInfo (GetPluginID(), 3))
</send>
</alias>

<alias
   match="pupgoal milestones *"
   enabled="y"
   send_to="12"
   sequence="95"
   expand_variables="y"
  >
  <send>
	local milestone_type = string.upper("%1")
	
	if (StatModsCaptured()) then
		if (milestone_type == "HP" or milestone_type == "MANA" or milestone_type == "MOVES") then
			Full_HP_Mana_Moves_Report(milestone_type)
		else
			Note("You need to select which milestone you'd like to see: mana, hp, or moves.")
		end
	else
		Refresh_Stats_And_Costs()
		command_to_run_after_stats_captured = 'pupgoal milestones ' .. milestone_type
	end
</send>
</alias>

<alias
   match="pupgoal milestones"
   enabled="y"
   send_to="12"
   sequence="95"
   expand_variables="y"
  >
  <send>
	local milestone_type = string.upper("%1")
	
	if (StatModsCaptured()) then
		Full_HP_Mana_Moves_Report("HP")
		Full_HP_Mana_Moves_Report("MANA")
		Full_HP_Mana_Moves_Report("MOVES")
	else
		Refresh_Stats_And_Costs()
		command_to_run_after_stats_captured = 'pupgoal milestones'
	end
</send>
</alias>





<alias
   match="pupgoal setgoal * *"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="100">
  <send>
		local temp_stat = string.upper("%1")
		local stat_max = tonumber("%2")
		
		if (temp_stat == "HP") then
			if (stat_max == nil) then
				Note("Please enter a valid number for the HP goal.")
				return
			else
				hp_goal = stat_max
				Note("Your HP goal has been set at " .. stat_max .. ".")
				SaveState()
			end
		elseif (temp_stat == "MANA") then
			if (stat_max == nil) then
				Note("Please enter a valid number for the mana goal.")
				return
			else
				mana_goal = stat_max
				Note("Your mana goal has been set at " .. stat_max .. ".")
				SaveState()
			end
		elseif (temp_stat == "MOVES") then
			if (stat_max == nil) then
				Note("Please enter a valid number for the moves goal.")
				return
			else
				move_goal = stat_max
				Note("Your moves goal has been set at " .. stat_max .. ".")
				SaveState()
			end
		else
			--if we are at this point it's invalid or a stat like wis, etc
			if (stat_max == nil) then
				Note("Please enter a valid number for the max stat.")
				return
			end
		
			if (stat_max > 400) then
				Note("The max for stats cannot exceed 400.")
				return
			end
			if (temp_stat == "STR") then
				str_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			elseif (temp_stat == "INT") then
				int_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			elseif (temp_stat == "WIS") then
				wis_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			elseif (temp_stat == "DEX") then
				dex_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			elseif (temp_stat == "CON") then
				con_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			elseif (temp_stat == "LUCK") then
				luck_goal = stat_max
				Note("Your " .. temp_stat .. " goal has been set at " .. stat_max .. ".")
				SaveState()
			else
				Note("Invalid type for 'pupgoal setgoal', you must enter a stat (i.e. wis, dex, luck, etc), hp, mana, or moves.")
			end			
		end
  
  </send>
</alias>  
  
<alias
   match="pupgoal show"
   enabled="y"
   send_to="12"
   sequence="100"
   expand_variables="y"
  >
	<send>
		if (StatModsCaptured()) then
			Note("")
			Get_Total_Train_Cost_For_All_Stats()
			Note("")
			Get_HP_MN_MV_Train_Cost("hp")
			Note("")
			Get_HP_MN_MV_Train_Cost("mana")
			Note("")
			Get_HP_MN_MV_Train_Cost("moves")	
			Note("")
		else
			Refresh_Stats_And_Costs()
			command_to_run_after_stats_captured = 'pupgoal show'
		end
	</send>
</alias>

<alias
   match="pupgoal show *"
   enabled="y"
   send_to="12"
   sequence="100"
   expand_variables="y"
  >
	<send>
		local option = string.lower("%1")
		
		if (StatModsCaptured()) then
			if (option == "hp") then
				Get_HP_MN_MV_Train_Cost("hp")
			elseif (option == "mana") then
				Get_HP_MN_MV_Train_Cost("mana")
			elseif (option == "moves") then
				Get_HP_MN_MV_Train_Cost("moves")
			elseif (option == "stats") then
				Get_Total_Train_Cost_For_All_Stats()
			else
				Note("Unrecognized stat, please see pupgoal help")
			end
		else
			Refresh_Stats_And_Costs()
			command_to_run_after_stats_captured = 'pupgoal show %1'
		end
		
	</send>
</alias>

 
</aliases>

<!--  Script  -->


<script>
<![CDATA[

save_state="y"

-- functions for handling Aardwolf color codes
-- required to send use ColoursToStyles
dofile(GetInfo (66) .. "\\worlds\\plugins\\" .. "aardwolf_colors.lua")

require "commas"
require "addxml"

hp_from_equipment = nil
mana_from_equipment = nil
moves_from_equipment = nil
command_to_run_after_stats_captured = ""

function OnPluginSaveState ()
	SetVariable ("str_goal", str_goal)
	SetVariable ("int_goal", int_goal)
	SetVariable ("wis_goal", wis_goal)
	SetVariable ("dex_goal", dex_goal)
	SetVariable ("con_goal", con_goal)
	SetVariable ("luck_goal", luck_goal)
	SetVariable ("hp_goal", hp_goal)
	SetVariable ("mana_goal", mana_goal)
	SetVariable ("move_goal", move_goal)
end -- function OnPluginSaveState

function OnPluginInstall ()	
	str_goal = tonumber(GetVariable ("str_goal")) or 395
	int_goal = tonumber(GetVariable ("int_goal")) or 395
	wis_goal = tonumber(GetVariable ("wis_goal")) or 395
	dex_goal = tonumber(GetVariable ("dex_goal")) or 395
	con_goal = tonumber(GetVariable ("con_goal")) or 395
	luck_goal = tonumber(GetVariable ("luck_goal")) or 395
	hp_goal = tonumber(GetVariable ("hp_goal")) or 81625
	mana_goal = tonumber(GetVariable ("mana_goal")) or 81625
	move_goal = tonumber(GetVariable ("move_goal")) or 81625
end

function Get_GMCP_Stat(stat_to_get)
	local rest
	local chartier
	res, chartier = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.maxstats.max"..stat_to_get)
	-- Get level from the GMCP plugin
	
	return tonumber(chartier)
end


function Get_Total_Stat_Train_Cost(start_stat, end_stat, cost_modifiers)
	local total_train_cost = 0
	local next_stat_cost = 0
	
	for i = start_stat, end_stat-1, 1 do
		if (i <= 60) then
			next_stat_cost = 1
		else
			next_stat_cost = Get_Stat_Train_Cost(i) + cost_modifiers
			--Note("I is " .. i .. " next stat cost is " .. next_stat_cost)
		end
		if (next_stat_cost < 1) then
			next_stat_cost = 1
		end
		total_train_cost = total_train_cost +  next_stat_cost
	end
	return total_train_cost
end

function Get_Stat_Train_Cost(stat)
	if (stat <= 70) then
		return 1
	elseif (stat >= 71 and stat <= 90) then
		return 2
	elseif (stat >= 91 and stat <= 130) then
		return 3
	elseif (stat >= 131 and stat <= 170) then
		return 4
	elseif (stat >= 171 and stat <= 200) then
		return 6
	elseif (stat >= 201 and stat <= 224) then
		return 9
	elseif (stat >= 225 and stat <= 250) then
		return 11
	elseif (stat >= 251 and stat <= 275) then
		return 15
	elseif (stat >= 276 and stat <= 290) then
		return 17
	elseif (stat >= 291 and stat <= 300) then
		return 20
	elseif (stat >= 301 and stat <= 325) then
		return 25
	elseif (stat >= 326 and stat <= 350) then
		return 35
	elseif (stat >= 351 and stat <= 375) then
		return 50
	elseif (stat >= 376) then
		return 60
	end
end

function Get_Train_Cost(starting_hp, ending_hp)
	local hp_increment = 10

	local total_train_cost = 0
	local cost_for_10_hp = 0
	
	if (starting_hp == ending_hp) then
		return 0
	end
	
	for i = starting_hp, ending_hp, hp_increment do
		if (i <= 10000) then
			cost_for_10_hp = 2
		elseif (i >= 10001 and i <=14000) then
			cost_for_10_hp = 3
		elseif (i >= 14001 and i <=18000) then
			cost_for_10_hp = 4
		elseif (i >= 18001 and i <=22000) then
			cost_for_10_hp = 5
		elseif (i >= 22001 and i <=26000) then
			cost_for_10_hp = 6
		elseif (i >= 26001 and i <=30000) then
			cost_for_10_hp = 7
		elseif (i >= 30001 and i <=40000) then
			cost_for_10_hp = 10
		elseif (i >= 40001 and i <=50000) then
			cost_for_10_hp = 15
		elseif (i >= 50001 and i <=75000) then
			cost_for_10_hp = 20
		elseif (i >= 75001 and i <=80000) then
			cost_for_10_hp = 25
		elseif (i >= 80001 and i <=99999) then
			cost_for_10_hp = 30
		else
			print ("error in Get_Train_Cost, cost_for_hp at "..i.." was not found.")
		end
		total_train_cost = total_train_cost + cost_for_10_hp
	end
	return total_train_cost
end

function Full_HP_Mana_Moves_Report(stat_type)
	local milestones = {10000, 14000, 18000, 22000, 26000, 30000, 40000, 50000, 75000, 80000, 81625}
	
	local current_stat = 0
	
	if (stat_type == "HP") then
		current_stat = Get_GMCP_Stat("hp") - hp_from_equipment 
	elseif (stat_type == "MANA") then
		current_stat = Get_GMCP_Stat("mana") - mana_from_equipment 
	elseif (stat_type == "MOVES") then
		current_stat = Get_GMCP_Stat("moves") - moves_from_equipment 
	else
		Note("Invalid stat type submitted to Full_HP_Mana_Moves_Report()")
		return
	end
	
	local first_stat = false --set to true when the first is found...will be false if there are no more to be bought..
	
	local seperator = "+------------+------------+----------+"
	                    
	for key, value in pairs(milestones) do
		local stat_cost = Get_Train_Cost(current_stat, value)
		if (stat_cost > 0) then
			if (first_stat == false) then
				first_stat = true
				Note("")
				Note (Correct_Case_Stat(stat_type).. " Milestones")
				Note(seperator)
				Note("|Milestone   | Ttl Trains | Powerups |")
				Note(seperator)
			end
			Note(string.format("|%-12.12s|%-12.12s|%-10.10s|", value, stat_cost, stat_cost/5))
			Note(seperator)
		end
	end
	if (first_stat == false) then
		-- We don't need any hp so just print a message saying that.
		Note("Your have reached the maximum " .. stat_type .. " of 81625 already.")
	end
end

function Refresh_Stats_And_Costs()
	Note("The plugin is now capturing your stat mods and natural HP/Mana/Moves.")
	SendNoEcho("train")
end
function trim(s)
  -- from PiL2 20.4
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function Get_HP_MN_MV_Train_Cost(type_to_calc)
	local current_hp_mn_mv = 0
	local cost_hp_mn_mv = 0
	local goal = 0

	if (type_to_calc == "hp") then
		current_hp_mn_mv = Get_GMCP_Stat("hp") - hp_from_equipment 
		goal = hp_goal
	elseif (type_to_calc == "mana") then
		current_hp_mn_mv = Get_GMCP_Stat("mana") - mana_from_equipment 
		goal = mana_goal
	elseif (type_to_calc == "moves") then
		current_hp_mn_mv = Get_GMCP_Stat("moves") - moves_from_equipment
		goal = move_goal
	end
	
	cost_hp_mn_mv = Get_Train_Cost(current_hp_mn_mv, goal)
	
	local temp_text = ""
	
	if (cost_hp_mn_mv <= 0) then
		temp_text = "@R[@C" .. Correct_Case_Stat(type_to_calc) .." Goal@R] @W" .. goal .. " @D| @WGoal Already Reached!!"
	else
		temp_text = "@R[@C" .. Correct_Case_Stat(type_to_calc) .." Goal@R] @W" .. goal .. " @D| @RTrain Cost @W" .. cost_hp_mn_mv .. " @D| @RApprox # PUPs @W" .. cost_hp_mn_mv/5
	end
	ColourTell_Styles(temp_text)
end

function StatModsCaptured()
	--For now we just check to see if the str racial mod is set...if it is then return true, they've captured their stats!
	if (str_mod == nil) then
		return false
	end
	return true
end

function Get_Total_Train_Cost_For_All_Stats()

	local str_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("str"), str_goal, str_mod)
	local int_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("int"), int_goal, int_mod)
	local wis_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("wis"), wis_goal, wis_mod)
	local dex_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("dex"), dex_goal, dex_mod)
	local con_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("con"), con_goal, con_mod)
	local luck_train_cost = Get_Total_Stat_Train_Cost(Get_GMCP_Stat("luck"), luck_goal, luck_mod)
	local total_cost = str_train_cost + int_train_cost + wis_train_cost + dex_train_cost + con_train_cost + luck_train_cost
	
	local temp_text = "@R[@CStat Goal Report@R] @WTrains Req'd (Stat Goal) @D| @RStr @W" .. str_train_cost .. "@D (@W" .. str_goal .. "@D) | "
	temp_text = temp_text .. "@RInt @W" .. int_train_cost .. "@D (@W" .. int_goal .. "@D) | "
	temp_text = temp_text .. "@RWis @W" .. wis_train_cost .. "@D (@W" .. wis_goal .. "@D) | "
	temp_text = temp_text .. "@RDex @W" .. dex_train_cost .. "@D (@W" .. dex_goal .. "@D) | "
	temp_text = temp_text .. "@RCon @W" .. con_train_cost .. "@D (@W" .. con_goal .. "@D) | "
	temp_text = temp_text .. "@RLuck @W" .. luck_train_cost .. "@D (@W".. luck_goal .. "@D) | "
	temp_text = temp_text .. "@RTotal trains: @W" .. total_cost .. "@D (@RRoughly @W".. total_cost/5 .. "@R pups@D)"
	
	ColourTell_Styles(temp_text)
end

function ColourTell_Styles(aard_color_coded_text)
	styles = ColoursToStyles (aard_color_coded_text)
		
	for _, v in ipairs (styles) do
		--Borrowed this code from here: http://www.gammon.com.au/forum/bbshowpost.php?bbsubject_id=9713
		--it takes the styles and converts into colourtells to display in the main window
		 ColourTell (RGBColourToName (v.textcolour),
						RGBColourToName (v.backcolour),
						v.text)
	end -- for each style run
	Note("") -- needed to make a new line
end

function Correct_Case_Stat(stat)
	local temp_stat = string.upper(stat)
	
	if (temp_stat == "HP") then
		return "HP"
	elseif (temp_stat == "MANA") then
		return "Mana"
	elseif (temp_stat == "MOVES") then
		return "Moves"
	else
		return temp_stat
	end
end


]]>
</script>


</muclient>
