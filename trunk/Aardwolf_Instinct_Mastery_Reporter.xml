<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, August 06, 2008, 1:13 PM -->
<!-- MuClient version 4.35 -->

<!-- Plugin "Consider_info" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Inst_Mastery_Reporter"
   author="Mendaloth"
   id="2d3da27571fb55279183b183"
   language="Lua"
   purpose="Reports your instinct and mastery to room or a channel."
   date_written="2008-10-15 07:35"
   requires="4.30"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Aardwolf Instinct/Mastery Reporter v 1.0
<================================ ACTIONS =================================>
help report                --> Displays this help file and the mudside help
                             >  file for the report command.
report instinct <chan>     --> Reports instinct. If <chan> is omitted 
                             > reports to the room.
report mastery  <chan>     --> Reports mastery. If <chan> is omitted reports
                             >  to the room.
----------------------------------------------------------------------------
]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>

</triggers>

<aliases>	  
<alias
   match="help report"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="101">
  <send>
    Note(GetPluginInfo(GetPluginID(), 3))
	SendNoEcho("help report") --The mud side help file should be displayed as well.
  </send>
</alias> 

<alias
   match="report help"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="101">
  <send>
    Note(GetPluginInfo(GetPluginID(), 3))
	SendNoEcho("report help") --The mud side help file should be displayed as well.
  </send>
</alias> 

<alias
   match="^report (instinct|mastery) (.*?)$"
   regexp = "y"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="95">
  <send>
		if ("%1" == "instinct") then
			report_channel = "%2"
			Refresh_Instinct_Amounts()
		else 
			report_channel = "%2"
			Refresh_Mastery_Amounts()
		end
  </send>
</alias> 
  
<alias
   match="^report (instinct|mastery)$"
   regexp = "y"
   enabled="y"
   echo_alias="y"
   send_to="12"
   sequence="95">
  <send>
		if ("%1" == "instinct") then
			report_channel = ""
			Refresh_Instinct_Amounts()
		else 
			report_channel = ""
			Refresh_Mastery_Amounts()
		end
  </send>
</alias>  
</aliases>
<!--  Script  -->


<script>
<![CDATA[

require "tprint"

first_color = "@G"
second_color = "@w"
seperator_color = "@C"

instinct = {}
mastery = {}
report_channel = ""

function Capture_Between_Tags(start_tag, end_tag, send_to_function, omit_from_output_val, regex_val, one_shot_val, function_to_call_at_end_tag, value_to_pass_to_function) 
-- Mendaloth's utlility function Capture_Between_Tags ver 1.01
-- omit_from_output is optional, defaults to false
-- regex is optional, defaults to false, and you must supply omit_from_output in order to use it
-- oneshot is optional, defaults to false, and you must supply omit_from_output and regex in order to use it
-- added function_to_call_at_end_tag, and value_to_pass_to_function both optional
	
	require "addxml"

	if (omit_from_output_val == nil) then
		omit_from_output_val = false
	end
	

	if (regex_val == nil) then
		regex_val = false
	end
	
	if (one_shot_val == nil) then
		one_shot_val = false
	end

	local unique_id = GetUniqueNumber()
	
	--Open tag trigger
	addxml.trigger {  match = start_tag, 
			regexp = regex_val,
			enabled = true,
			one_shot = one_shot_val,
			sequence = 50,
			omit_from_output = omit_from_output_val,
			name = "starting_tag"..unique_id,
			send_to = 12,
			send = "EnableTrigger('ending_tag'.."..unique_id..", true)	EnableTrigger('capture_all'.." .. unique_id .. ", true)"
		  }

	if (function_to_call_at_end_tag == nil) then
		function_to_call_at_end_tag = ""
	else
		if (value_to_pass_to_function == nil) then
			function_to_call_at_end_tag = " " .. function_to_call_at_end_tag .. "()"
		else
			function_to_call_at_end_tag = " " .. function_to_call_at_end_tag .. "(" .. value_to_pass_to_function .. ")"
		end
	end
	
	addxml.trigger {  match = end_tag, 
			regexp = regex_val,
			enabled = false,
			one_shot = one_shot_val,
			omit_from_output = omit_from_output_val,
			name = "ending_tag"..unique_id,
			sequence = 5,
			send_to = 12,
			send = "EnableTrigger('ending_tag'.."..unique_id..", false)	EnableTrigger('capture_all'.." .. unique_id .. ", false)" .. function_to_call_at_end_tag
		  }
		  
	addxml.trigger {     match="^.*$",
		regexp = true,
		enabled = false,
		omit_from_output = omit_from_output_val,
		sequence = 50,
		keep_evaluating=false,
		name = "capture_all"..unique_id,
		script = send_to_function
	}
		  
end



function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function Refresh_Instinct_Amounts()
	Capture_Between_Tags("                                                   ---- Next Cost ----", "You have * available for instinct.", "Process_Instinct_Line", true, false, true, "Done_Instinct_Capture") 
	SendNoEcho("instinct all")
end

function Process_Instinct_Line(_, line, _, _)
	--Note("Line is " .. line)
	if (string.sub(line, 1, 1) == "-" or trim(line) == "") then
		--It's a blank line or filled with -, do nothing.
	else
		local skill_name = trim(string.sub(line, 11, (11+22)))
		if (skill_name == "Skill name") then
			--This is the first line so just ignore it.
			return
		end
		instinct_amount = tonumber(trim(string.sub(line, 42, (42+8))))
		
		instinct[skill_name] = {}
		
		instinct[skill_name].instinct_bought = instinct_amount
	end
end

function Done_Instinct_Capture()
	local formatted_info = ""
	local highest_instinct = Find_Highest_Instinct()
	local grouped_instincts = {}
	
	if (highest_instinct == 0) then
		--Special case have NO instinct.
		if (report_channel == "") then
			SendNoEcho("emote reports their instinct: They have ZERO instinct. ")
		else
			SendNoEcho(report_channel .. " reports their instinct: They have ZERO instinct.")
		end
		return
	end
	
	--Count down from highest instinct to lowest
	for i = highest_instinct, 1, -1 do
		for key, value in pairs(instinct) do
			if (value.instinct_bought == i) then
				--Check to see if we have an instinct at that level already
				local group_exists = false
				for key2, value2 in pairs(grouped_instincts) do
					if (value2.amount == i) then
						group_exists = true
						table.insert(grouped_instincts[key2].instincts, key)
					end
				end
				if (group_exists == false) then
					--first instinct we've seen with this amount bought so add it.
					table.insert(grouped_instincts, {amount=i, instincts = {key}})
				end
			end
		
		end
	end
	
	--First create an array which is all the instincts at the same level formatted
	local text_of_grouped_instinct = {}
	for key, value in pairs(grouped_instincts) do
		table.insert(text_of_grouped_instinct, first_color .. table.concat(value.instincts, second_color .. ", " .. first_color) .. second_color ..": " .. value.amount)
	end
	
	--Now that we have all the instincts at same level formatted and in their own rows by the amount purchased
	-- combine them into one single string so you can display it.
	formatted_info = table.concat(text_of_grouped_instinct, seperator_color .. " | ")
	
	if (report_channel == "") then
		SendNoEcho("emote reports their instincts: " .. formatted_info)
	else
		SendNoEcho(report_channel .. " " .. seperator_color .. "Instincts " ..  formatted_info)
	end
end

function Refresh_Mastery_Amounts()
	Capture_Between_Tags("              Mastery QP      Gold", "Water*", "Process_Mastery_Line", true, false, true, "Done_Mastery_Capture") 
	SendNoEcho("mastery")
end

function Find_Highest_Instinct()
	local highest = 0
	for key, value in pairs(instinct) do
		if (value.instinct_bought > highest) then
			highest = value.instinct_bought
		end
	end
	return highest
end

function Process_Mastery_Line(_, line, _, _)
	--Note("Line is " .. line)
	if (string.sub(line, 1, 1) == "-" or trim(line) == "") then
		--It's a blank line or filled with -, do nothing.
	else
		local mastery_name = trim(string.sub(line, 0, 13))
		if (mastery_name == "Damage Type") then
			--This is the first line so just ignore it.
			return
		end
	
		local mastery_amount = tonumber(trim(string.sub(line, 14, (14+7))))
		
		if (mastery_amount == nil) then
			--This will capture prompts - which won't have a mastery amount - so just ignore them.
			return
		end
		
		mastery[mastery_name] = {}
		
		mastery[mastery_name].mastery_bought = mastery_amount
	end
end

function Done_Mastery_Capture()
	local formatted_info = ""
	local highest_mastery = Find_Highest_Mastery()
	local grouped_masterys = {}
	
	if (highest_mastery == 0) then
		--Special case have NO mastery.
		if (report_channel == "") then
			SendNoEcho("emote reports their mastery: They have ZERO mastery. ")
		else
			SendNoEcho(report_channel .. " reports their mastery: They have ZERO mastery.")
		end
		return
	end
	
	--Count down from highest mastery to lowest
	for i = highest_mastery, 1, -1 do
		for key, value in pairs(mastery) do
			if (value.mastery_bought == i) then
				--Check to see if we have an mastery at that level already
				local group_exists = false
				for key2, value2 in pairs(grouped_masterys) do
					if (value2.amount == i) then
						group_exists = true
						table.insert(grouped_masterys[key2].masterys, key)
					end
				end
				if (group_exists == false) then
					--first mastery we've seen with this amount bought so add it.
					table.insert(grouped_masterys, {amount=i, masterys = {key}})
				end
			end
		
		end
	end
	
	--First create an array which is all the masterys at the same level formatted
	local text_of_grouped_mastery = {}
	for key, value in pairs(grouped_masterys) do
		table.insert(text_of_grouped_mastery, first_color .. table.concat(value.masterys, second_color .. ", " .. first_color) .. second_color ..": " .. value.amount)
	end
	
	--Now that we have all the mastery at same level formatted and in their own rows by the amount purchased
	-- combine them into one single string so you can display it.
	formatted_info = table.concat(text_of_grouped_mastery, seperator_color .. " | ")
	
	if (report_channel == "") then
		SendNoEcho("emote reports their mastery levels: " .. formatted_info)
	else
		SendNoEcho(report_channel .. " " .. seperator_color .. "Masteries " .. formatted_info)
	end
end

function Find_Highest_Mastery()
	local highest = 0
	for key, value in pairs(mastery) do
		if (value.mastery_bought > highest) then
			highest = value.mastery_bought
		end
	end
	return highest
end

]]>
</script>

</muclient>